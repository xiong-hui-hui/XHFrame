package com.xiong.tuan.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.provider.Settings;
import android.telephony.TelephonyManager;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

/**
 * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
 * to be unique across all Android devices.  Much more so than ANDROID_ID is.
 *
 * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
 * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
 * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
 * usable value.
 *
 * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
 * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
 * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
 * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
 *
 * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
 * change after a factory reset.  Something to be aware of.
 *
 * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
 *
 * @see http://code.google.com/p/android/issues/detail?id=10603
 *
 * @return a UUID that may be used to uniquely identify your device for most purposes.
 */

public class UUIDFactory {

    private static UUIDFactory instance;
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";
    protected static UUID uuid;

    private UUIDFactory(Context context) {
        final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
        final String id = prefs.getString(PREFS_DEVICE_ID, null );
        if (id != null) {
            uuid = UUID.fromString(id);
        } else {
            final String imei = getIMEI(context);
            final String pseudoUniqueId = getPseudoUniqueId();
            final String androidId = getAndroidId(context);
            final String mac = getWlanMac(context);
            try {
                String combinedDeviceId = imei + pseudoUniqueId + androidId + mac;
                uuid = UUID.nameUUIDFromBytes(combinedDeviceId.getBytes("utf8"));
            } catch (UnsupportedEncodingException e) {
                uuid = UUID.fromString(getWlanMac(context));
            }
            prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString() ).apply();
        }
    }


    public static synchronized UUIDFactory getInstance(Context context){
        if(instance == null) instance = new UUIDFactory(context);
        return instance;
    }

    public String getUUID() {
        return uuid.toString();
    }

    /**
     * 获得设备识别认证码
     *
     * @return
     */
    public static String getIMEI(Context context) {
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        if (tm == null) {
            return null;
        }
        return tm.getDeviceId();
    }

    /**
     * Pseudo-Unique ID, 这个在任何Android手机中都有效
     *
     * @return
     */
    public static String getPseudoUniqueId() {
        String m_szDevIDShort = "35"
                + // we make this look like a valid IMEI
                Build.BOARD.length() % 10 + Build.BRAND.length() % 10
                + Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10
                + Build.DISPLAY.length() % 10 + Build.HOST.length() % 10
                + Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10
                + Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10
                + Build.TAGS.length() % 10 + Build.TYPE.length() % 10
                + Build.USER.length() % 10; //
        return m_szDevIDShort;
    }

    /**
     * The Android ID
     *
     * @param context
     * @return
     */
    public static String getAndroidId(Context context) {
        return Settings.Secure
                .getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
    }

    /**
     * The WLAN MAC Address string
     *
     * @param context
     * @return
     */
    public static String getWlanMac(Context context) {
        WifiManager wm = (WifiManager) context
                .getSystemService(Context.WIFI_SERVICE);
        return wm.getConnectionInfo().getMacAddress();
    }
}
